CSS Components: A Building Block Approach
Components in CSS are reusable blocks of code that define the styles for specific elements 
or groups of elements. They promote code organization, maintainability, and reusability. 
By encapsulating styles within components, you can avoid duplication and easily manage changes
 to your design.

Benefits of Using CSS Components
Improved Code Reusability: Components can be used multiple times throughout your project, reducing the amount of code you need to write.
Enhanced Maintainability: Changes to a component's styles can be made in one place, ensuring consistency across your entire project.
Better Organization: Components can help you structure your CSS code in a more logical and organized manner.
Creating a Card Component with Sass
Here's a simple example of a card component using Sass:

SCSS
// card.scss
.card {
  background-color: #fff;
  border: 1px solid #ccc;
  border-radius: 5px;
  padding: 20px;
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);

  .card-image {
    width: 100%;
    height: 200px;
    object-fit: cover;
  }

  .card-title {
    font-size: 18px;
    font-weight: bold;
    margin-bottom: 10px;
  }

  .card-description {
    font-size: 14px;
    color: #666;
    margin-bottom: 15px;
  }

  .card-button   
 {
    display: block;
    text-align: center;
    padding: 10px 20px;
    background-color: #007bff;
    color: #fff;
    border: none;
    border-radius: 5px;
    cursor: pointer;   

  }
}
Use code with caution.

CSS Output after Compilation
The compiled CSS will look something like this:

CSS
.card {
  background-color: #fff;
  border: 1px solid #ccc;
  border-radius: 5px;
  padding: 20px;
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
}

.card .card-image {
  width: 100%;
  height: 200px;
  object-fit: cover;
}

.card .card-title {
  font-size: 18px;
  font-weight: bold;
  margin-bottom: 10px;
}

.card .card-description {
  font-size: 14px;
  color: #666;
  margin-bottom: 15px;
}

.card .card-button {
  display: block;
  text-align: center;
  padding: 10px 20px;
  background-color: #007bff;
  color: #fff;
  border: none;
  border-radius: 5px;
  cursor: pointer;   

}
Use code with caution.

Structuring Components in a Sass Project
A common approach to organizing Sass components is to create separate files for each component. This makes it easier to manage and maintain your codebase.

Example project structure:

styles/
  components/
    card.scss
    button.scss
    header.scss
    footer.scss
  main.scss
In the main.scss file, you can import and use the components as needed:

SCSS
@import "components/card";
@import "components/button";

.my-card {
  // Use the card component
  @include card;
}

.my-button {
  // Use the button component
  @include button;
}
